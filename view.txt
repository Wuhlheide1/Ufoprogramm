// Source code is decompiled from a .class file using FernFlower decompiler.
package sas;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.WindowEvent;
import java.util.HashSet;
import java.util.Vector;
import javax.swing.JFrame;

public final class View {
   private static int instances = 0;
   private static Scene scene = new Scene();
   private JFrame frame;
   private Vector<Character> buffer;
   private HashSet<Integer> gedrueckt;
   private static View view;

   public View() {
      if (instances == 1) {
         throw new RuntimeException();
      } else {
         ++instances;
         int width = 600;
         int height = 400;
         String name = "SaS-Programm";
         this.frame = new JFrame(name);
         Container jp = this.frame.getContentPane();
         scene.setPreferredSize(new Dimension(width, height));
         scene.setFocusable(true);
         jp.add(scene, "Center");
         this.frame.setDefaultCloseOperation(3);
         this.frame.setResizable(false);
         this.frame.pack();
         this.frame.setLocationRelativeTo((Component)null);
         this.frame.setVisible(true);
         scene.requestFocus();
         this.buffer = getScene().getBuffer();
         this.gedrueckt = getScene().getGedrueckt();
         this.frame.addHierarchyListener(new 1(this));
      }
   }

   public View(String name) {
      if (instances == 1) {
         throw new RuntimeException();
      } else {
         ++instances;
         int width = 600;
         int height = 400;
         this.frame = new JFrame(name);
         Container jp = this.frame.getContentPane();
         scene.setPreferredSize(new Dimension(width, height));
         scene.setFocusable(true);
         jp.add(scene, "Center");
         this.frame.setDefaultCloseOperation(3);
         this.frame.setResizable(false);
         this.frame.pack();
         this.frame.setLocationRelativeTo((Component)null);
         this.frame.setVisible(true);
         scene.requestFocus();
         this.buffer = getScene().getBuffer();
         this.gedrueckt = getScene().getGedrueckt();
         this.frame.addHierarchyListener(new 2(this));
      }
   }

   public View(int width, int height) {
      if (instances == 1) {
         throw new RuntimeException();
      } else {
         ++instances;
         this.frame = new JFrame("sas-Programm");
         Container jp = this.frame.getContentPane();
         scene.setPreferredSize(new Dimension(width, height));
         scene.setFocusable(true);
         jp.add(scene, "Center");
         this.frame.setDefaultCloseOperation(3);
         this.frame.setResizable(false);
         this.frame.pack();
         this.frame.setLocationRelativeTo((Component)null);
         this.frame.setVisible(true);
         scene.requestFocus();
         this.buffer = getScene().getBuffer();
         this.gedrueckt = getScene().getGedrueckt();
         this.frame.addHierarchyListener(new 3(this));
      }
   }

   public View(int width, int height, String name) {
      if (instances == 1) {
         throw new RuntimeException();
      } else {
         ++instances;
         this.frame = new JFrame(name);
         Container jp = this.frame.getContentPane();
         scene.setPreferredSize(new Dimension(width, height));
         scene.setFocusable(true);
         jp.add(scene, "Center");
         this.frame.setDefaultCloseOperation(3);
         this.frame.setResizable(false);
         this.frame.pack();
         this.frame.setLocationRelativeTo((Component)null);
         this.frame.setVisible(true);
         scene.requestFocus();
         this.buffer = getScene().getBuffer();
         this.gedrueckt = getScene().getGedrueckt();
         this.frame.addHierarchyListener(new 4(this));
      }
   }

   private JFrame getFrame() {
      return this.frame;
   }

   protected void probablyExit() {
      if (!this.frame.isShowing()) {
         this.frame.dispatchEvent(new WindowEvent(this.frame, 201));
      }

   }

   public static View getView() {
      if (instances == 0) {
         view = new View();
      }

      return view;
   }

   protected static Scene getScene() {
      return scene;
   }

   public void remove(Shapes grafik) {
      scene.remove(grafik);
      scene.repaint();
   }

   public void setBackgroundColor(Color col) {
      scene.setColor(col);
      scene.repaint();
   }

   public void setSize(int width, int height) {
      scene.setPreferredSize(new Dimension(width, height));
      this.getFrame().pack();
      this.getFrame().getContentPane().addHierarchyBoundsListener(new 5(this));
   }

   public int getWidth() {
      return this.getFrame().getContentPane().getWidth();
   }

   public int getHeight() {
      return this.getFrame().getContentPane().getHeight();
   }

   public void setName(String name) {
      this.getFrame().setTitle(name);
   }

   public boolean keyBackspacePressed() {
      return this.gedrueckt.contains(8);
   }

   public boolean keyEnterPressed() {
      return this.gedrueckt.contains(10);
   }

   public char keyGetChar() {
      char c = true;

      while(this.buffer.size() == 0) {
      }

      char c = (Character)this.buffer.get(0);
      this.buffer.remove(0);
      return c;
   }

   public boolean keyPressed(char pT) {
      int pTCode = pT;
      if (pT >= 'a' && pT <= 'z') {
         pTCode = pT - 32;
      }

      return this.gedrueckt.contains(pTCode);
   }

   public boolean keyPressed() {
      return !this.gedrueckt.isEmpty();
   }

   public boolean keyLeftPressed() {
      return this.gedrueckt.contains(37);
   }

   public boolean keyUpPressed() {
      return this.gedrueckt.contains(38);
   }

   public boolean keyDownPressed() {
      return this.gedrueckt.contains(40);
   }

   public boolean keyRightPressed() {
      return this.gedrueckt.contains(39);
   }

   public void keyBufferDelete() {
      this.buffer.removeAllElements();
      this.gedrueckt.clear();
   }

   public void wait(int millSec) {
      try {
         Thread.sleep((long)millSec);
      } catch (InterruptedException var3) {
      }

   }
}